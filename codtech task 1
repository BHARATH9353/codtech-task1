import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Reshape, LeakyReLU, Dropout, Conv2D, Flatten

# Define the generator
def build_generator(latent_dim):
    model = Sequential()
    model.add(Dense(128 * 7 * 7, activation='relu', input_dim=latent_dim))
    model.add(Reshape((7, 7, 128)))
    model.add(Conv2D(128, kernel_size=3, strides=2, padding='same', activation='relu'))
    model.add(Conv2D(64, kernel_size=3, strides=2, padding='same', activation='relu'))
    model.add(Conv2D(1, kernel_size=7, activation='sigmoid', padding='same'))
    return model

# Define the discriminator
def build_discriminator(image_shape):
    model = Sequential()
    model.add(Conv2D(64, kernel_size=3, strides=2, input_shape=image_shape, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Conv2D(128, kernel_size=3, strides=2, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    return model

# Create the generator and discriminator
latent_dim = 100
generator = build_generator(latent_dim)
discriminator = build_discriminator((28, 28, 1))

# Create the GAN
discriminator.trainable = False
model = Sequential([generator, discriminator])

# Compile the models
discriminator.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.compile(loss='binary_crossentropy', optimizer='adam')

# Train the GAN
for epoch in range(100):
    # Train the discriminator
    real_images = ...  # Load real images
    fake_images = generator.predict(np.random.randn(100, latent_dim))
    x = np.concatenate((real_images, fake_images))
    y = np.ones((200, 1))
    y[100:] = 0
    d_loss, _ = discriminator.train_on_batch(x, y)

    # Train the generator
    noise = np.random.randn(100, latent_dim)
    y = np.ones((100, 1))
    g_loss = model.train_on_batch(noise, y)

    print(f"Epoch {epoch+1}, D Loss: {d_loss}, G Loss: {g_loss}")
